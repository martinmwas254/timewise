"use client";

import { useState } from "react";
import type { Tutor } from "@/lib/types";
import { handleGenerateTimetable } from "@/app/actions";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Loader2, AlertCircle, CalendarCheck, Wand2 } from "lucide-react";
import { Label } from "@/components/ui/label";

type TimetableGeneratorProps = {
  tutors: Tutor[];
};

export function TimetableGenerator({ tutors }: TimetableGeneratorProps) {
  const [numberOfGrades, setNumberOfGrades] = useState<number>(5);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [timetable, setTimetable] = useState<string | null>(null);

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    if (tutors.length === 0) {
      setError("Please add at least one tutor before generating a timetable.");
      return;
    }
    if (numberOfGrades <= 0) {
      setError("Number of grades must be greater than zero.");
      return;
    }

    setIsLoading(true);
    setError(null);
    setTimetable(null);

    const input = {
      tutors: tutors.map(({ name, specialities, availability }) => ({
        name,
        specialities,
        availability,
      })),
      numberOfGrades,
    };

    const result = await handleGenerateTimetable(input);
    if (result.success) {
      setTimetable(result.timetable);
    } else {
      setError(result.error);
    }
    setIsLoading(false);
  };

  return (
    <div className="space-y-6">
      <Card className="shadow-lg hover:shadow-xl transition-shadow">
        <form onSubmit={handleSubmit}>
          <CardHeader>
            <CardTitle>3. Generate Schedule</CardTitle>
            <CardDescription>
              Specify the number of grades and let AI create the perfect schedule.
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-2">
              <Label htmlFor="grades">Number of Grades/Classes</Label>
              <Input
                id="grades"
                type="number"
                value={numberOfGrades}
                onChange={(e) => setNumberOfGrades(parseInt(e.target.value, 10))}
                min="1"
                placeholder="e.g. 5"
                className="mt-1"
              />
            </div>
          </CardContent>
          <CardFooter>
            <Button type="submit" className="w-full" disabled={isLoading}>
              {isLoading ? (
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              ) : (
                <Wand2 className="mr-2 h-4 w-4" />
              )}
              {isLoading ? "Generating..." : "Generate with AI"}
            </Button>
          </CardFooter>
        </form>
      </Card>

      {error && (
        <Alert variant="destructive">
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>Error</AlertTitle>
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      )}
      
      {isLoading && (
        <Card className="flex items-center justify-center p-10 text-center shadow-lg">
          <div className="flex flex-col items-center gap-4">
            <Loader2 className="h-8 w-8 animate-spin text-primary" />
            <p className="text-muted-foreground">Generating timetable... this may take a moment.</p>
          </div>
        </Card>
      )}

      {timetable && (
        <Card className="shadow-lg animate-in fade-in-50">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <CalendarCheck className="h-5 w-5 text-primary" />
              Generated Timetable
            </CardTitle>
            <CardDescription>
              Here is the conflict-free timetable generated by AI.
            </CardDescription>
          </CardHeader>
          <CardContent>
            <pre className="bg-muted/50 p-4 rounded-md text-sm whitespace-pre-wrap font-code text-muted-foreground">
              {timetable}
            </pre>
          </CardContent>
        </Card>
      )}
    </div>
  );
}
